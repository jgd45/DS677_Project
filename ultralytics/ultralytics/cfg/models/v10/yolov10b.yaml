# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# YOLOv10b object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolov10
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 2 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov10n.yaml' will call yolov10.yaml with scale 'n'
  # [depth, width, max_channels]
  b: [0.67, 1.00, 1024]

backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 7, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 10, C2f, [256, True]]
  - [-1, 1, nn.Dropout2d, [0.1]]   
  - [-1, 1, SCDown, [512, 3, 2]] # 5-P4/16
  - [-1, 10, C2f, [512, True]]
  - [-1, 1, SCDown, [1024, 3, 2]] # 7-P5/32
  - [-1, 7, C2fCIB, [1024, True]]
  - [-1, 1, PSA,  [1024]]        
  - [-1, 1, SPPF, [1024, 5]] # 9
  - [-1, 1, PSA, [1024]] # 10

# YOLOv10.0n head
head:
  # conv â†’ channel projection
  - [-1, 1, Conv,                [512, 1, 1]]
  # global avg pool
  - [-1, 1, nn.AdaptiveAvgPool2d, [1]]
  # flatten to (B, C)
  - [-1, 1, nn.Flatten,           []]
  # bottleneck FC
  - [-1, 1, nn.Linear,           [512, 256]]
  - [-1, 1, nn.SiLU,             []]
  - [-1, 1, nn.Dropout,          [0.2]]
  # classifier
  - [-1, 1, nn.Linear,           [256, nc]]

