# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# YOLOv10n object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolov10
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 2 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov10n.yaml' will call yolov10.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]

backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, SCDown, [512, 3, 2]] # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, SCDown, [1024, 3, 2]] # 7-P5/32
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]] # 9
  - [-1, 1, PSA, [1024]] # 10

# YOLOv10.0n head
head:
  - [-1, 1, Conv,                [512, 1, 1]]            # â†’ 512*0.25 = 128 channels
  - [-1, 1, nn.AdaptiveAvgPool2d, [1]]
  - [-1, 1, nn.Flatten,           []]                   # â†’ (B,128)
  - [-1, 1, nn.Linear,           [128, 256]]             # match 128 â†’ 256
  - [-1, 1, nn.SiLU,             []]
  - [-1, 1, nn.Dropout,          [0.2]]
  - [-1, 1, nn.Linear,           [256, nc]]